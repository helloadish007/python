PYTHON FEATURES:
-----------------
1.gui support
2.cross platform language
3.interpreted language
4.Python is a case-sensitive language
5.Python is a type inferred language;
-----------------------
Interpreter:	
============
Translates program one statement at a time.
Compiler:
=========
Scans the entire program and translates it as a whole into machine code.
-----------------------
COMMENTS:
----------
way to increase the readability of your code is by using comments!
EG:
1.using triple quotes 
"""
If I really hate pressing `enter` and
typing all those hash marks, I could
just do this instead
"""
2.using hash
#THIS IS A COMMENT
shorcut:select all text to be commented and ^ctrl +/
------------------------
PYTHON KEYWORDS
------------------------
Keywords are the reserved words in Python.
In Python, keywords are case sensitive.
EG:
False	class	return
None	continue	for	lambda	try
True	def	from	while
and	del	global	not	with
as	elif	if	or	yield
assert	else	import	pass	 
break	except	in	raise	
-------------------------
PYTHON IDENTIFIERS:
--------------------------
An identifier is a name given to entities like class, functions, variables, etc. 
It helps to differentiate one entity from another.
-------------------
Rules for writing identifiers:
==============================
1.Identifiers can be a combination of letters in lowercase (a to z) or uppercase (A to Z) or digits (0 to 9) or an underscore _.
Names like myClass, var_1 and print_this_to_screen, all are valid example.
2.An identifier cannot start with a digit. 1variable is invalid, but variable1 is perfectly fine.
3.Keywords cannot be used as identifiers.
--------------------------
PYTHON VARIABLES:
----------------------
A variable is a named location used to store data in the memory.
-----------------------
PYTHON OPERATORS:
-----------------
Operators are special symbols in Python that carry out arithmetic or logical computation.
The value that the operator operates on is called the operand.

ARITHMETIC OPERATORS:
======================
1) +	 Add two operands or unary plus	x + y
+2
2) -	 Subtract right operand from the left or unary minus	x - y
-2
3) *	Multiply two operands	x * y
4) /	Divide left operand by the right one (always results into float)	x / y
5) %	Modulus - remainder of the division of left operand by the right	x % y (remainder of x/y)
6) //	Floor division - division that results into whole number adjusted to the left in the number line	x // y
7) **	Exponent - left operand raised to the power of right	x**y (x to the power y)

COMPARISON OPERATORS:
=====================
Comparison operators are used to compare values.
It either returns True or False according to the condition.

1) >	Greater that - True if left operand is greater than the right	x > y
2) <	Less that - True if left operand is less than the right	x < y
3) ==	Equal to - True if both operands are equal	x == y
4) !=	Not equal to - True if operands are not equal	x != y
5) >=	Greater than or equal to - True if left operand is greater than or equal to the right	x >= y
6) <=	Less than or equal to - True if left operand is less than or equal to the right	x <= y

LOGICAL OPERATORS:
==================
Logical operators are the and, or, not operators.

1) and	True if both the operands are true	x and y
2) or	True if either of the operands is true	x or y
3) not	True if operand is false (complements the operand)	not x
------------------------------------------------------
BITWISE OPEARTORS:
==================
Bitwise operators act on string of binary digits

It operates bit by bit
EG:

Let x = 10 (0000 1010 in binary) and y = 4 (0000 0100 in binary)

1) & 	Bitwise AND 	x& y = 0 (0000 0000)
2) | 	Bitwise OR 	x | y = 14 (0000 1110)
3) ~ 	Bitwise NOT 	~x = -11 (1111 0101)
4) ^ 	Bitwise XOR 	x ^ y = 14 (0000 1110)
5) >> 	Bitwise right shift 	x>> 2 = 2 (0000 0010)
6) << 	Bitwise left shift 	x<< 2 = 40 (0010 1000)

ASSIGNMENT OPERATORS:
=====================
Assignment operators are used in Python to assign values to variables.

1) = 	x = 5 	x = 5
2) += 	x += 5 	x = x + 5
3) -= 	x -= 5 	x = x - 5
4) *= 	x *= 5 	x = x * 5
5) /= 	x /= 5 	x = x / 5
6) %= 	x %= 5 	x = x % 5
7) //= 	x //= 5 	x = x // 5
8) **= 	x **= 5 	x = x ** 5
9) &= 	x &= 5 	x = x & 5
10) |= 	x |= 5 	x = x | 5
11) ^= 	x ^= 5 	x = x ^ 5
12) >>= 	x >>= 5 	x = x >> 5
13) <<= 	x <<= 5 	x = x << 5

==> is and is not are the identity operators in Python.
==> in and not in are the membership operators in Python

Operator precedence rule in Python:
===================================

() 	Parentheses            =======>highest priority
** 	Exponent
+x, -x, ~x 	Unary plus, Unary minus, Bitwise NOT
*, /, //, % 	Multiplication, Division, Floor division, Modulus
+, - 	Addition, Subtraction
<<, >> 	Bitwise shift operators
& 	Bitwise AND
^ 	Bitwise XOR
| 	Bitwise OR
==, !=, >, >=, <, <=, is, is not, in, not in 	Comparisions, Identity, Membership operators
not 	Logical NOT
and 	Logical AND
or 	Logical OR               =====>least priority


--------------------------------------------------------------------------
NAMESPACES:
===========
Name (also called identifier) is simply a name given to objects. 
Everything in Python is an object. 

For example, when we do the assignment a = 2, here 2 is an object stored in memory and a is the name we associate it with. 
We can get the address (in RAM) of some object through the built-in function, id().
eg:
Initially, an object 2 is created and the name a is associated with it,
when we do a = a+1, a new object 3 is created and now a associates with this object.


==> namespace is a collection of names.
==>In Python, you can imagine a namespace as a mapping of every name, you have defined, to corresponding objects.
----------------------------------------------------------
PYTHON FLOW CONTROL STATEMENTS:
------------------------------------

The if…elif…else statement is used in Python for decision making.
-------------------------------------
PYTHON LOOPS:
==============
FOR LOOP:
----------
The for loop in Python is used to iterate over a sequence (list, tuple, string) or other iterable objects. 
Iterating over a sequence is called traversal.
-------------------------------------------------
We can generate a sequence of numbers using range() function
-------------------------------------------------------
WHILE LOOP:
------------
The while loop in Python is used to iterate over a block of code as long as the test expression (condition) is true.

BREAK :
-------
The break statement terminates the loop containing it. 
Control of the program flows to the statement immediately after the body of the loop.

CONTINUE:
---------
The continue statement is used to skip the rest of the code inside a loop for the current iteration only.
Loop does not terminate but continues on with the next iteration.

PASS:
------
In Python programming, pass is a null statement. 
The difference between a comment and pass statement in Python is that,
while the interpreter ignores a comment entirely, pass is not ignored.

However, nothing happens when pass is executed. It results into no operation (NOP).

PYTHON FUNCTIONS:
==================


function is a group of related statements that perform a specific task.
Furthermore, it avoids repetition and makes code reusable.

SYNTAX:
=======

def function_name(parameters):
	"""docstring"""
	statement(s)
 
 
 The first string after the function header is called the docstring and is short for documentation string.
 It is used to explain in brief, what a function does.
 
 __doc__ attribute of the function.
 
 The return statement
 ---------------------

The return statement is used to exit a function and go back to the place from where it was called.

Scope and Lifetime of variables:
--------------------------------

Scope of a variable is the portion of a program where the variable is recognized. 
Parameters and variables defined inside a function is not visible from outside. Hence, they have a local scope.

Lifetime of a variable is the period throughout which the variable exits in the memory. 
The lifetime of variables inside a function is as long as the function executes.

They are destroyed once we return from the function. 
Hence, a function does not remember the value of a variable from its previous calls.

Types of Functions
-------------------
    Built-in functions - Functions that are built into Python.
    User-defined functions - Functions defined by the users themselves.
    
PYTHON STRINGS:
---------------
A string is a sequence of characters.

A character is simply a symbol. For example, the English language has 26 characters.
conversion of character to a number is called encoding, and the reverse process is decoding. 
ASCII and Unicode are some of the popular encoding used.

In Python, string is a sequence of Unicode character

Strings are immutable. This means that elements of a string cannot be changed once it has been assigned. 
We can simply reassign different strings to the same name.

Introduction to OOPs in Python:
================================
Python is a multi-paradigm programming language. Meaning, it supports different programming approach.

One of the popular approach to solve a programming problem is by creating objects. This is known as Object-Oriented Programming (OOP).

An object has two characteristics:

attributes
behavior
Let's take an example:

Parrot is an object,

name, age, color are attributes
singing, dancing are behavior

In Python, the concept of OOP follows some basic principles:
============================================================

Inheritance	A process of using details from a new class without modifying existing class.
Encapsulation	Hiding the private details of a class from other objects.
Polymorphism	A concept of using common operation in different ways for different data input.

CLASS:
======
Class
A class is a blueprint for the object.

OBJECT:
=======
An object (instance) is an instantiation of a class.
When class is defined, only the description for the object is defined.

